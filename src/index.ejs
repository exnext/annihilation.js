<!doctype html>
<html>

<head>
  <meta charset="utf-8">
  <title>
    <%= name %> ver.<%= version %>
  </title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="./favicon.ico">

  <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/css/bootstrap.min.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">

  <link rel="stylesheet" href="//unpkg.com/@highlightjs/cdn-assets@11.5.1/styles/default.min.css">
  <script src="//unpkg.com/@highlightjs/cdn-assets@11.5.1/highlight.min.js"></script>

  <script>
    function reset(element) {
      let section = element;

      while (section && !section.tagName.match(/section/gi)) {
        section = section.parentElement;
      }

      if (section) {
        let template = section.querySelector('template');
        let result = section.querySelector('.result');
        result.innerHTML = '';
        result.appendChild(document.importNode(template.content.cloneNode(true), true));
      }
    }

    function onload() {
      const sectionTemplates = {};
      document.querySelectorAll('template[id]')
        .forEach((template) => {
          sectionTemplates[template.id] = template;
        });

      const sections = document.querySelectorAll('section.demo');

      for (let section of sections) {
        let template = section.querySelector('template');

        if (template) {
          let sectionTemplateId = ['section-content', section.getAttribute('template')].filter(x => x).join('-');
          section.appendChild(sectionTemplates[sectionTemplateId].content.cloneNode(true));

          let source = section.querySelector('.source');
          source.textContent = template.innerHTML;

          let result = section.querySelector('.result');
          result.appendChild(document.importNode(template.content.cloneNode(true), true));
        }
      }

      hljs.highlightAll();
    }
  </script>

  <style>
    body {
      background-color: black;
      color: white;
      font-family: sans-serif;
    }

    section {
      position: relative;
      margin: 20px;
      padding: 20px;
      background-color: #fff4;
      border-radius: 10px;
    }

    section a {
      color: inherit;
      font-weight: bold;
    }

    section.demo>.content {
      display: grid;
      grid-template-columns: 1fr 1fr;
      align-items: center;
      gap: 20px;
    }

    section.demo>.content>*:last-child {
      display: flex;
      justify-content: center;
      height: 100%;
      align-items: center;
    }

    .actions {
      text-align: center;
    }

    .source {
      max-height: 90vh;
    }

    .result {
      position: relative;
      overflow: hidden;
      width: 100%;
    }

    section.background>.content>*:last-child {
      background-image: url('assets/fourth.jpg');
    }

    .advanced ul {
      background-color: transparent;
      display: initial;
    }
  </style>

  <style media="all and (max-width: 1000px)">
    section.demo>.content {
      display: block;
    }
  </style>

  <style name="img-demo">
    .img-demo .result,
    .carousel-item {
      text-align: center;
    }

    .img-demo .result>*:first-child {
      position: relative;
      cursor: pointer;
    }

    .img-demo .result>*:first-child::after {
      content: 'Click me!';
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      color: red;
      font-size: 2rem;
      animation: blink 1s linear infinite;
    }

    .img-demo .result>*:first-child:hover::after {
      content: none;
    }

    @keyframes blink {
      50% {
        opacity: 0;
      }
    }

    .img-demo .result>*:first-child img {
      max-width: 80%;
      max-height: 80vh;
    }
  </style>
</head>

<body onload="onload()">
  <template id="section-content">
    <div class="content">
      <div>
        <pre>
          <code class="source language-html"></code>
        </pre>
        <div class="actions">
          <button onclick="reset(this)">
            RESET
          </button>
        </div>
      </div>

      <div>
        <div class="result"></div>
      </div>
    </div>
  </template>

  <h1>Introduction</h1>

  <section id="common-styles">
    <h3>Documentation</h3>
    <div>Look at <a href="https://www.npmjs.com/package/@exnext/annihilation.js">npm</a> or <a
        href="https://github.com/exnext/annihilation.js">github</a></div>

    <h3>NPM</h3>
    <pre><code class="language-bash">npm install @exnext/annihilation.js</code></pre>

    <h3>Used images in the live demo</h3>
    <div>
      <a href="https://unsplash.com/photos/rmfIgnyIdKU" target="_blank">First by Wladislav Glad</a>
      <a href="https://unsplash.com/photos/7vmDV3Dm2SA" target="_blank">Second by Wladislav Gla</a>
      <a href="https://unsplash.com/photos/epHpXWHhbNI" target="_blank">Third by Saxon White</a>
      <a href="https://unsplash.com/photos/08vyPYn9OE4" target="_blank">Fourth by Navi</a>
    </div>
  </section>

  <section class="demo img-demo">
    <h3>Example 1</h3>
    <small>basic</small>

    <template>
      <div id="img_demo_1">
        <img src="assets/first.jpg" />
      </div>

      <script>
        document.getElementById('img_demo_1')
          .addEventListener('click', function (event) {
            annihilation({
              element: '#img_demo_1'
            });
          });
      </script>
    </template>
  </section>

  <section class="demo img-demo">
    <h3>Example 2</h3>
    <small>with animate.css and the mouse coordinates</small>

    <template>
      <div id="img_demo_2">
        <img src="assets/second.jpg" />
      </div>

      <script>
        document.getElementById('img_demo_2')
          .addEventListener('click', function (event) {
            let rect = event.target.getBoundingClientRect(),
              columns = 15,
              rows = Math.round(columns * rect.height / rect.width),
              colClick = Math.floor(columns * (event.clientX - rect.left) / rect.width),
              rowClick = Math.floor(rows * (event.clientY - rect.top) / rect.height);

            annihilation({
              element: event.currentTarget,
              columns,
              rows,
              animationCssClass: 'animate__animated animate__zoomOut',
              onCreatesPartial: (params) => {
                let multiplier = Math.abs(params.row - rowClick) + Math.abs(params.column - colClick);
                params.piece.style.animationDelay = 0.05 * multiplier + 's';
              }
            });
          });
      </script>
    </template>
  </section>

  <section class="demo img-demo">
    <h3>Example 3</h3>
    <small>with animate.css</small>

    <template>
      <div id="img_demo_3">
        <img src="assets/third.jpg" />
      </div>

      <script>
        document.getElementById('img_demo_3')
          .addEventListener('click', function (event) {
            let rect = event.target.getBoundingClientRect(),
              columns = 15,
              rows = Math.round(columns * rect.height / rect.width),
              colClick = Math.floor(columns * (event.clientX - rect.left) / rect.width),
              rowClick = Math.floor(rows * (event.clientY - rect.top) / rect.height);

            annihilation({
              element: event.currentTarget,
              columns,
              rows,
              animationCssClass: 'animate__animated',
              onCreatesPartial: (params) => {
                let multiplier = 0;

                if (colClick > params.column) {
                  multiplier = Math.max(params.column - Math.abs(params.row - rowClick), 0);
                  params.piece.style.animationDelay = 0.05 * multiplier + 's';
                  params.piece.classList.add('animate__fadeOutLeft');
                } else {
                  multiplier = Math.max(params.columns - params.column - Math.abs(params.row - rowClick), 0);
                  params.piece.style.animationDelay = 0.05 * multiplier + 's';
                  params.piece.classList.add('animate__fadeOutRight');
                }
              }
            });
          });
      </script>
    </template>
  </section>

  <section class="demo">
    <h3>Example 4</h3>
    <small>with animate.css and bootstrap carousel</small>

    <template>
      <style>
        #carouselExampleControls_1 .carousel-item {
          transition-duration: 0.6s;
          transition-delay: 0.5s;
        }

        #carouselExampleControls_1 .carousel-item.hide-item {
          visibility: hidden;
        }
      </style>

      <div id="carouselExampleControls_1" class="carousel slide" data-bs-ride="carousel">
        <div class="carousel-inner">
          <div class="carousel-item active">
            <img src="assets/first.jpg" />
          </div>
          <div class="carousel-item">
            <img src="assets/second.jpg" />
          </div>
          <div class="carousel-item">
            <img src="assets/third.jpg" />
          </div>
        </div>

        <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleControls_1"
          data-bs-slide="prev">
          <span class="carousel-control-prev-icon" aria-hidden="true"></span>
          <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleControls_1"
          data-bs-slide="next">
          <span class="carousel-control-next-icon" aria-hidden="true"></span>
          <span class="visually-hidden">Next</span>
        </button>
      </div>

      <script>
        document.getElementById('carouselExampleControls_1')
          .addEventListener('slide.bs.carousel', function (event) {
            let direction = event.direction == 'left' ?
              'animate__slideOutLeft' :
              'animate__slideOutRight';

            annihilation({
              element: '.carousel-item.active',
              removeElement: false,
              rows: 10,
              columns: 1,
              animationCssClass: 'animate__animated ' + direction,
              onCreatesPartial: (params) => {
                params.piece.style.animationDelay = 0.5 * Math.random() + 's';
              }
            }).then(({ element }) => {
              if (element.classList.contains('carousel-item-end')) {
                element.classList.add('hide-item');
              }
            });
          });

        document.getElementById('carouselExampleControls_1')
          .addEventListener('slid.bs.carousel', function (event) {
            event.target.querySelectorAll('.carousel-item')
              .forEach(function (element) {
                element.classList.remove('hide-item');
              });
          });
      </script>
    </template>
  </section>

  <section class="demo background">
    <h3>Example 5</h3>
    <small>with animate.css and bootstrap</small>

    <template>
      <style>
        #form_demo_1 form {
          background: #FFF4;
          padding: 20px;
          border-radius: 10px;
          margin: 20px;
        }
      </style>

      <div id="form_demo_1">
        <form>
          <div class="mb-3">
            <label for="login" class="form-label">Login</label>
            <input type="text" class="form-control" id="login" value="any login">
          </div>
          <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <input type="password" class="form-control" id="password" value="any password">
          </div>
          <div class="mb-3">
            <button type="button" class="btn btn-primary mb-3" id="form_demo_1_button">Click me!</button>
          </div>
        </form>
      </div>

      <script>
        document.getElementById('form_demo_1_button')
          .addEventListener('click', function (event) {
            annihilation({
              element: '#form_demo_1',
              columns: 20,
              animationCssClass: 'animate__animated animate__zoomOut',
              onCreatesPartial: (params) => {
                let rect = params.element.getBoundingClientRect(),
                  colClick = Math.floor(params.columns * (event.clientX - rect.left) / rect.width),
                  rowClick = Math.floor(params.rows * (event.clientY - rect.top) / rect.height);

                let multiplier = Math.abs(params.row - rowClick) + Math.abs(params.column - colClick);
                params.piece.style.animationDelay = 0.01 * multiplier + 's';
              }
            });
          });
      </script>
    </template>
  </section>

  <section class="demo background">
    <h3>Example 6</h3>
    <small>with bootstrap and custom animation</small>

    <template>
      <style>
        #exampleModal {
          color: black;
        }

        #exampleModal .modal-footer {
          justify-content: center;
        }

        #exampleModal,
        #exampleModal .modal-dialog {
          transition-duration: 0s;
        }

        .explosion_animate {
          --x: 0;
          --y: 0;
          animation: explosion_animate 0.5s forwards;
        }

        @keyframes explosion_animate {
          to {
            opacity: 0;
            transform: translate(var(--x), var(--y));
          }
        }
      </style>

      <div class="modal-triggers text-center">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
          Basic
        </button>

        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
          Zoom out
        </button>

        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
          Rows
        </button>

        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
          Explosion
        </button>
      </div>

      <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="exampleModalLabel">Demo</h5>
            </div>
            <div class="modal-body">
              It is the live demo
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-primary">OK</button>
            </div>
          </div>
        </div>
      </div>

      <script>
        var exampleModal = new bootstrap.Modal('#exampleModal', {
          keyboard: false
        });

        var options = {};

        document.querySelector('#exampleModal .btn-primary')
          .addEventListener('click', function (event) {
            annihilation({
              element: '#exampleModal .modal-dialog',
              removeElement: false,
              ...options
            })
              .then(function ({ element }) {
                element.style.display = 'none';
                exampleModal.hide();
              });
          });

        document.getElementById('exampleModal')
          .addEventListener('show.bs.modal', function (event) {
            event.target.querySelector('.modal-dialog').style.display = '';
          });

        document.querySelectorAll('.modal-triggers button')
          .forEach(function (button) {
            button.addEventListener('click', function (event) {
              switch (event.target.innerHTML.trim()) {
                case 'Zoom out':
                  options = {
                    animationCssClass: 'animate__animated animate__zoomOut'
                  };
                  break;

                case 'Rows':
                  options = {
                    columns: 1,
                    rows: 10,
                    animationCssClass: 'animate__animated',
                    onCreatesPartial: (params) => {
                      let animation = params.row % 2 ? 'animate__fadeOutLeft' : 'animate__fadeOutRight';
                      params.piece.classList.add(animation);
                      params.piece.style.animationDelay = 0.01 * params.row + 's';
                    }
                  };
                  break;

                case 'Explosion':
                  options = {
                    animationCssClass: 'explosion_animate',
                    onCreatesPartial: (params) => {
                      let x = -100 * ((params.columns / 2) - params.column), y = -100 * ((params.rows / 2) - params.row);
                      params.piece.style.setProperty('--x', x + '%');
                      params.piece.style.setProperty('--y', y + '%');
                    }
                  };
                  break;

                default:
                  options = {};
                  break;
              }
            });
          });
      </script>
    </template>
  </section>

  <script src="//cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>